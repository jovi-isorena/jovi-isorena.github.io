Djikstra
- weighted
- undirected

Pseudo code:
1. Let distance of start vertex from start vertex = 0
2. Let distance of other vertices from start = infinity
Repeat
    3. Visit the unvisited vertex with the smallest known distance from the start vertex.
    4. For the current vertex, examine its unvisited neighbors.
    5. For the current vertex, calculate distance of each neighbour from start vertex.
    6. If the calculated distance of a vertex is less than the known distance, update the shortest distance
    7. Update the previous vertex to the list of visited vertices
    8. Add the current vertex to the list of visited vertices
Until all vertices visited

LET distance of start vertex from start vertex = 0
LET distance of all other vertices from start to infinity
WHILE vertices remain unvisited 
    Visit unvisited vertex with smallest known distance from start vertex (call this current vertex)
    FOR EACH unvisited neighbor of the current vertex
        Calculate the distance from start vertex
        IF the calculated distance of this vertex is less than the known distance
            Update shortest distance to this vertex
            Update the previous vertex with the current vertex
        END IF
    NEXT unvisited neighbor
    ADD the current vertex o the list of visited vertices
END WHILE

Recursive Backtracking
Pseudo code:
1. Given a current cell as a parameter
2. Mark the current cell as visited
3. While the current cell has any unvisited neighbor cells
    a. Choose one of the unvisited neighbors
    b. Remove the wall between the current cell and the chosen cell.
    c. Invoke the routine recursively for a chosen cell


code:
_ProcessNode(nodeKey){
    this._visited[nodeKey] = true;
    const node = this._nodes[nodeKey];
    const neighbors = [...node.potentialEdges]
    while(neighbors.length>0){
        const ki = RouletteSelect(neighbors);
        if(!(ki in this._visited)){
            const adjNode = this._nodes[ki];
            node.edges.push(ki);
            adjNode.edges.push(nodeKey);
            this._ProcessNode(ki);
        }
    }
}


DEPTH FIRST SEARCH

visit, add to visited,  add to path stack.
if no neighbor. pop path stack. current node = top

Pseudo Code:
let n = number of nodes in graph
g = adjacency list 
visited = [false,....] //size n

function dfs(at)
    if(visited[at]): return
    visited[at] = true

    neighbors = g[at]
    for next in neighbors:
        dfs(next);

start_node = 0
dfs(start_node)        


A*
if f_cost are similar, go look on h_cost
f = g + h
g = distance from start
h = heuristic distance (distance from target)
Open // the set of nodes to be evaluated (or seen, but not visited)
Closed // the set of nodes already evaluated (visited)
add the start node to OPEN

loop
    current = node in OPEN with the lowest f_cost
    remove current from OPEN
    add current to Closed

    if current is the target node //path is found
        return

    foreach neighbor of the current node   
        if neighbor is not traversable or neighbor is in Closed
            skip to the next neighbor

        if new path to neighbor is shorter OR neighbor is not in OPEN
            set f_cost of neighbor
            set parent of neighbor to current
            if neighbor is not in OPEN  
                add neighbor to OPEN